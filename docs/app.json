[{"name": "app.py", "content": "import plotly.express as px\nimport palmerpenguins\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_plotly, render_widget\nfrom geopy.distance import geodesic, great_circle\nfrom ipyleaflet import Map, basemaps, Marker, TileLayer, Polyline, basemap_to_tiles\nfrom faicons import icon_svg\n\n\n\n# OpenWeatherMap API key\nAPI_KEY = '4cc0a30163a9737128eb144e1f8d0d84'\n\n# Fetch current temperature for a given location using OpenWeatherMap\ndef get_current_temperature(latitude, longitude):\n    url = f\"https://api.openweathermap.org/data/2.5/weather?lat={latitude}&lon={longitude}&appid={API_KEY}&units=metric\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        data = response.json()\n        return data['main']['temp']\n    except Exception as e:\n        return \"N/A\"\n\n# Sample city and BASEMAP data\nCITIES = {\n    \"Louisiana\": {\"latitude\": 30.9843, \"longitude\": -91.9623, \"altitude\": 10},\n    \"Missouri\": {\"latitude\": 38.5739, \"longitude\": -92.6038, \"altitude\": 214},\n    \"New York\": {\"latitude\": 40.7128, \"longitude\": -74.0060, \"altitude\": 33},\n    \"Biscoe Island\": {\"latitude\": -66.5432, \"longitude\": -67.6667, \"altitude\": 0},\n    \"Dream Island\": {\"latitude\": -64.7333, \"longitude\": -64.2333, \"altitude\": 0},\n    \"Torgersen Island\": {\"latitude\": -64.7667, \"longitude\": -64.0833, \"altitude\": 0},\n}\n\npenguin_colonies = {\n    \"Ad\u00e9lie Penguins\": [(\"Ross Sea\", -77.5, 163.5), (\"Antarctic Peninsula\", -64.0, -60.0)],\n    \"Chinstrap Penguins\": [(\"South Shetland Islands\", -62.0, -58.0), (\"Antarctic Peninsula\", -63.0, -57.0)],\n    \"Gentoo Penguins\": [(\"Falkland Islands\", -51.7, -59.0), (\"South Georgia\", -54.5, -36.0)],\n}\n\nBASEMAPS = {\n    \"WorldImagery\": basemaps.Esri.WorldImagery,\n    \"Mapnik\": basemaps.OpenStreetMap.Mapnik,\n}\n\n# Load the Palmer Penguins dataset\npenguins_df = palmerpenguins.load_penguins()\n\n# UI Setup\nui.page_opts(title=\"Map and Penguin Dataset Exploration\", fillable=True)\n\nwith ui.sidebar(bg=\"#333\", style=\"color: #fff; padding: 15px;\"):\n    # Instructions Section\n    ui.div(\n        \"\"\"\n        **Map Application:**\n        - Select two locations to calculate distances, either by choosing cities or penguin colony sites.\n        - Choose a basemap option to customize the view.\n        \n        \"\"\",\n        style=\"margin-bottom: 20px; color: #fff; font-size: 14px;\",\n    )\n\n    # Full-Size Value Boxes at the top of the sidebar\n    ui.div(\"Geospatial Data\", style=\"color: #fff; font-weight: bold; margin-bottom: 10px;\")\n    with ui.layout_column_wrap(fill=False, style=\"display: flex; flex-direction: column; gap: 10px; margin-bottom: 20px;\"):\n        # Value Box 1: Great Circle Distance\n        with ui.value_box(theme=\"gradient-purple\"):\n            \"Great Circle Distance\"\n            @render.text\n            def great_circle_dist():\n                loc1 = (CITIES[input.loc1()][\"latitude\"], CITIES[input.loc1()][\"longitude\"])\n                loc2 = (CITIES[input.loc2()][\"latitude\"], CITIES[input.loc2()][\"longitude\"])\n                circle = great_circle(loc1, loc2)\n                return f\"{circle.kilometers.__round__(1)} km\"\n\n        # Value Box 2: Geodesic Distance\n        with ui.value_box(theme=\"gradient-purple\"):\n            \"Geodesic Distance\"\n            @render.text\n            def geo_dist():\n                loc1 = (CITIES[input.loc1()][\"latitude\"], CITIES[input.loc1()][\"longitude\"])\n                loc2 = (CITIES[input.loc2()][\"latitude\"], CITIES[input.loc2()][\"longitude\"])\n                dist = geodesic(loc1, loc2)\n                return f\"{dist.kilometers.__round__(1)} km\"\n\n        # Value Box 3: Altitude Difference\n        with ui.value_box(theme=\"gradient-purple\"):\n            \"Altitude Difference\"\n            @render.text\n            def altitude_diff():\n                try:\n                    alt_diff = CITIES[input.loc1()][\"altitude\"] - CITIES[input.loc2()][\"altitude\"]\n                    return f\"{alt_diff} m\"\n                except TypeError:\n                    return \"N/A\"\n\n    # Weather Data\n    ui.div(\"Weather Data\", style=\"color: #fff; font-weight: bold; margin-bottom: 10px;\")\n    with ui.layout_column_wrap(fill=False, style=\"display: flex; flex-direction: column; gap: 10px; margin-bottom: 20px;\"):\n        # Temperature for Location 1\n        with ui.value_box(theme=\"gradient-blue-indigo\"):\n            \"Location 1 Temperature\"\n            @render.text\n            def loc1_temperature():\n                loc1 = CITIES[input.loc1()]\n                temp = get_current_temperature(loc1[\"latitude\"], loc1[\"longitude\"])\n                return f\"{temp}\u00b0C\" if temp != \"N/A\" else \"Unavailable\"\n\n        # Temperature for Location 2\n        with ui.value_box(theme=\"gradient-blue-indigo\"):\n            \"Location 2 Temperature\"\n            @render.text\n            def loc2_temperature():\n                loc2 = CITIES[input.loc2()]\n                temp = get_current_temperature(loc2[\"latitude\"], loc2[\"longitude\"])\n                return f\"{temp}\u00b0C\" \n        \n    # Sidebar Input Elements\n    ui.input_selectize(\"loc1\", \"Location 1\", choices=list(CITIES.keys()), selected=\"Louisiana\")\n    ui.input_selectize(\"loc2\", \"Location 2\", choices=list(CITIES.keys()), selected=\"Biscoe Island\")\n    ui.input_selectize(\"basemap\", \"Choose a basemap\", choices=list(BASEMAPS.keys()), selected=\"WorldImagery\")\n    ui.div(\n            \"\"\"\n         **Penguin Exploration:**\n        - Set specific attributes in the sidebar to filter penguin data.\n        - Explore via histograms, scatterplots, and seaborn histograms.\n        \"\"\",\n        style=\"margin-bottom: 20px; color: #fff; font-size: 14px;\",\n    )\n    ui.input_selectize(\"selected_species_list\", \"Select Species\", [\"Adelie\", \"Gentoo\", \"Chinstrap\"], multiple=True)\n    ui.input_selectize(\"selected_island_list\", \"Select Island\", [\"Biscoe\", \"Dream\", \"Torgersen\"], multiple=True)\n    ui.input_slider(\"flipper_length_mm\", \"Flipper length (mm)\", 150, 250, (150, 250))\n    ui.input_slider(\"bill_depth_mm\", \"Bill depth (mm)\", 13, 21, (13, 21))\n    ui.input_slider(\"bill_length_mm\", \"Bill length (mm)\", 30, 60, (30, 60))\n    ui.input_slider(\"body_mass_g\", \"Body mass (g)\", 2500, 6500, (2500, 6500))\n    ui.input_selectize(\"sex\", \"Select Sex\", [\"Male\", \"Female\"])\n\nwith ui.navset_card_underline():\n    with ui.nav_panel(\"Map\"):\n        with ui.card(style=\"background-color: #222; color: #fff;\"):\n            ui.card_header(\"Map (drag the markers to change locations)\")\n            @render_widget\n            def map_widget():\n                return create_map()\n\n    with ui.nav_panel(\"Filtered Table\"):\n        @render.table\n        def filtered_table():\n            return filtered_data()\n\n    with ui.nav_panel(\"Histogram\"):\n        @render_plotly\n        def plotly_histogram():\n            filtered_df = filtered_data()\n            return px.histogram(filtered_df, x=\"flipper_length_mm\", color=\"species\", title=\"Flipper Length Histogram\")\n\n    with ui.nav_panel(\"Scatterplot\"):\n        @render_plotly\n        def plotly_scatterplot():\n            filtered_df = filtered_data()\n            return px.scatter(filtered_df, x=\"flipper_length_mm\", y=\"bill_length_mm\", color=\"species\", title=\"Flipper Length vs. Bill Length\")\n\n    with ui.nav_panel(\"Seaborn Histogram\"):\n        @render.plot\n        def seaborn_histogram():\n            filtered_df = filtered_data()\n            fig, ax = plt.subplots()\n            sns.histplot(data=filtered_df, x=\"body_mass_g\", hue=\"species\", multiple=\"stack\", ax=ax)\n            ax.set_title(\"Body Mass Distribution (Seaborn)\")\n            ax.set_xlabel(\"Body Mass (g)\")\n            ax.set_ylabel(\"Count\")\n            return fig\n\n@reactive.Calc\ndef filtered_data():\n    data = penguins_df.copy()\n    if input.selected_species_list():\n        data = data[data['species'].isin(input.selected_species_list())]\n    if input.selected_island_list():\n        data = data[data['island'].isin(input.selected_island_list())]\n    flipper_length = input.flipper_length_mm\n    if isinstance(flipper_length, list) and len(flipper_length) == 2:\n        data = data[(data['flipper_length_mm'] >= flipper_length[0]) & (data['flipper_length_mm'] <= flipper_length[1])]\n    return data\n\ndef create_map():\n    map_obj = Map(zoom=4, center=(0, 0))\n    update_marker(map_obj, CITIES[input.loc1()], on_move1, \"loc1\")\n    update_marker(map_obj, CITIES[input.loc2()], on_move2, \"loc2\")\n    update_line(map_obj, CITIES[input.loc1()], CITIES[input.loc2()])\n    map_obj.add_layer(basemap_to_tiles(BASEMAPS[input.basemap()]))\n    return map_obj\n\ndef update_marker(map_obj, loc, on_move, name):\n    marker = Marker(location=(loc[\"latitude\"], loc[\"longitude\"]), draggable=True, name=name)\n    marker.on_move(on_move)\n    map_obj.add_layer(marker)\n\ndef update_line(map_obj, loc1, loc2):\n    line = Polyline(locations=[(loc1[\"latitude\"], loc1[\"longitude\"]), (loc2[\"latitude\"], loc2[\"longitude\"])], color=\"blue\", weight=2, name=\"line\")\n    map_obj.add_layer(line)\n\ndef on_move1(event):\n    new_loc = event[\"location\"]\n    CITIES[\"loc1\"][\"latitude\"], CITIES[\"loc1\"][\"longitude\"] = new_loc\n\ndef on_move2(event):\n    new_loc = event[\"location\"]\n    CITIES[\"loc2\"][\"latitude\"], CITIES[\"loc2\"][\"longitude\"] = new_loc\n", "type": "text"}]